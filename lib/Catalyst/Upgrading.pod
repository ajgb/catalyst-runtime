=head1 Upgrading to Catalyst 5.80

Work in progress

=head1 Known backwards compatibility breakages.

=head2 Catalyst::Plugin::Authentication

You need at least version FIXME of Catalyst::Plugin::Authentication.

=head2 Moose applications

Moose components for Catalyst 5.70 needed to do

    extends qw/Moose::Object Catalyst::Component/;

to be able to use the constructor provided by Moose. In 5.80
C<Catalyst::Component> already inherits from C<Moose::Object>. Therefor you
shouldn't directly inherit from C<Moose::Object> yourself, otherwise your
Class' @ISA will not linearise with C3.

=head2 Anonymous closures installed directly into the symbol table

If you have any code which installs anonymous subroutine references directly
into the symbol table, you may encounter breakages. The simplest solution is
to use L<Sub::Name> to name the subroutine. Example:

    #Originalcode, likely to break:
    my $full_method_name = join('::',$package_name, $method_name);
    *$full_method_name = sub { ... };

    #Fixed Code
    use Sub::Name 'subname';
    my $full_method_name = join('::',$package_name, $method_name);
    *$full_method_name = subname $full_method_name, sub { ... };

Additionally, you can take advantage of Catalyst's use of L<Class::MOP> and
install the closure using the appropriate metaclass. Example:

    use Class::MOP;
    my $metaclass = Moose::Meta::Class->initialize($package_name);
    $metaclass->add_method($method_name => sub { ... });

=head2 Components without new methods

FIXME

=head2 Components without COMPONENT methods

FIXME

=head2 __PACKAGE__->mk_accessor('meta');

Won't work due to a limitation of L<MooseX::Emulate::Class::Accessor::Fast>

FIXME

=head2 Class::Data::Inheritable side effects

FIXME

=head2 Extending Catalyst::Request or other classes in an ad-hoc manor using mk_accessor

FIXME

=head2 require $class was successful but the package is not defined.

FIXME Warning

=head2 $c->plugin method

Deprecated

=head2 Components which inherit Catalyst::Component's COMPONENT method, who's new method does not return a true value.

Previously if your new method returned a false value, then your class' configuration would be blessed into a hash on your behalf,
and this would be returned from the COMPONENT method. This is no longer supported. You are not recommended to implement your own new method
in components, instead, you should inherit the new method from Catalyst::Component, and use Moose's BUILD functionality
to perform any construction work necessary for your sub-class.


=head1 WARNINGS

=head2 Methods in Catalyst::Dispatcher

The following methods in Catalyst::Dispatcher are likely to change 
significantly in the 5.8X release series, and therefore their use is highly
deprecated.

=over

=item tree 

=item dispatch_types 

=item registered_dispatch_types 

=item method_action_class  

=item action_hash 

=item container_hash

=back

The first time one of these methods is called, a warning will be emitted:

    Class $class is calling the deprecated method Catalyst::Dispatcher::$public_method_name,\n"
    . "this will be removed in Catalyst 5.9X"

You should B<NEVER> be calling any of these methods from application code.

Plugins authors and maintainers whos plugins need to call these methods 
should email the development list to discuss your use-case, and what a 
better API should look like.

=head2 Confused multiple inheritence with Catalyst::Component::COMPONENT

Warning message:

    There is a COMPONENT method resolving after Catalyst::Component 
    in ${next_package}.
    
This means that one of the packages on the right hand side of 
Catalyst::Component in your Class' inheritance hierarchy defines
a COMPONENT method.

Previously, Catalyst's COMPONENT method would delegate to the
method on the right hand side, which could then delegate back again
with NEXT. This (as it is insane), is no longer supported, as it
makes no sense with C3 method dispatch order.

Therefore the correct fix is to re-arrange your class' inheritance
hierarchy so that the COMPONENT method you would like to inherit is
the first COMPONENT method in your @ISA. 


=cut
